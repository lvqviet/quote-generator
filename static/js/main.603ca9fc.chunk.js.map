{"version":3,"sources":["components/Author/index.jsx","components/Footer/index.jsx","components/Loading/index.jsx","components/Quote/index.jsx","components/RandomQuote/RandomQuote.jsx","App.js","serviceWorker.js","index.js"],"names":["Author","author","genre","theme","onClick","className","style","color","fontSize","Footer","props","borderTop","width","padding","marginTop","alignSelf","Loading","aria-hidden","Quote","quote","RandomQuote","useState","quotes","setQuote","loading","setLoading","setTheme","getData","url","array","a","Axios","get","res","data","console","log","message","getQuote","useEffect","display","flexDirection","minHeight","backgroundColor","transition","length","quoteAuthor","map","key","_id","quoteText","quoteGenre","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.603ca9fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './author.scss';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\n\r\nfunction Author({ author, genre, theme, onClick }) {\r\n  return (\r\n    <div \r\n    className=\"author\" \r\n    onClick={onClick}\r\n    style={{\r\n      color: theme ? '' : '#ff5555',\r\n    }}\r\n    >\r\n      <div>\r\n        <h3 style={{color: theme ? '' : '#ff5555'}}>\r\n          {author}\r\n        </h3>\r\n        <p>{genre}</p>\r\n      </div>\r\n      \r\n        <ArrowRightAltIcon\r\n        fontSize=\"large\"\r\n        style={{ color: theme ? 'white' : '#ff5555'}}\r\n      />\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Author;\r\n","import React from 'react';\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <div\r\n      style={{\r\n        fontSize: '15px',\r\n        color: '#777',\r\n        borderTop: '1px solid #A9A9A9',\r\n        width: '35%',\r\n        padding: '1.5rem',\r\n        marginTop: 'auto',\r\n        alignSelf: 'center',\r\n      }}\r\n    >\r\n      Quoc Viet @ DevChallanges.io\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './loading.scss';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div>\r\n      <section className=\"talign-center\">\r\n        <div\r\n          className=\"spinner icon-spinner-2\"\r\n          aria-hidden=\"true\"\r\n        ></div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport './quote.scss';\r\n\r\nfunction Quote({ quote }) {\r\n  return <div className=\"quote\">{quote}</div>;\r\n}\r\n\r\nexport default Quote;\r\n","/* eslint-disable no-unused-expressions */\r\nimport Axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Author from '../Author';\r\nimport Footer from '../Footer';\r\nimport Loading from '../Loading';\r\nimport Quote from '../Quote';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\nimport './randomQuote.scss';\r\n\r\nfunction RandomQuote() {\r\n  const [quotes, setQuote] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [theme, setTheme] =useState(true);\r\n\r\n  const getData = async (url, array) => {  // quote:{} | quotes:[]\r\n    try {\r\n      setLoading(true);\r\n      if (array) {\r\n        const res = await Axios.get(url);\r\n        setQuote(res.data.quotes);\r\n      } else {\r\n        const res = await Axios.get(url);\r\n        setQuote(res.data.quote);\r\n        console.log(res.data.quote);\r\n      }\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const getQuote = () => {\r\n    getData(\r\n      'https://quote-garden.herokuapp.com/api/v2/quotes/random',\r\n      false\r\n    );\r\n  };\r\n\r\n  const getQuotesByAuthor = () => {\r\n    getData(\r\n      `https://quote-garden.herokuapp.com/api/v2/authors/${quotes.quoteAuthor}`,\r\n      true\r\n    );\r\n    return;\r\n  };\r\n\r\n  const handleTheme = () => {\r\n    setTheme(!theme);\r\n  }\r\n\r\n  useEffect(getQuote, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        backgroundColor: theme ? '': '#282a36' ,\r\n        transition: '150ms'\r\n      }}\r\n    >\r\n      <div className=\"btn\" style={{color: theme ? '' : '#ff5555'}}>\r\n        <div className=\"btn--theme\" onClick={handleTheme}>\r\n          { theme ? (  // check theme\r\n            <WbSunnyIcon fontSize='large'/>\r\n          ) : (\r\n              <Brightness2Icon fontSize='large' />\r\n          )}\r\n        </div>\r\n        <div className=\"btn--random\" onClick={getQuote}>\r\n          random <LoopIcon />\r\n        </div>\r\n      </div>\r\n      {loading ? ( // check call api\r\n        <div style={{color: theme ? '' : '#ff5555'}}> \r\n          <Loading />\r\n        </div>\r\n        \r\n      ) : (\r\n        <div className=\"container\">\r\n          {quotes.length ? (\r\n            <div style={{color: theme ? '' : '#ff5555'}}>\r\n              <h1 >{quotes[0].quoteAuthor}</h1>\r\n              {quotes.map(quote => (\r\n                <Quote \r\n                key={quote._id} \r\n                quote={quote.quoteText} \r\n                />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div \r\n            className=\"content\"\r\n            style={{color: theme ? '' : '#ff5555'}}\r\n            >\r\n              <Quote quote={quotes.quoteText} />\r\n              <Author\r\n                author={quotes.quoteAuthor}\r\n                genre={quotes.quoteGenre}\r\n                theme={theme}\r\n                onClick={getQuotesByAuthor}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RandomQuote;\r\n","import React from 'react';\nimport './App.css';\nimport RandomQuote from './components/RandomQuote/RandomQuote';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RandomQuote />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}